// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/resources.proto

package com.clarifai.grpc.api;

/**
 * <pre>
 * StatValueAggregateQuery
 * </pre>
 *
 * Protobuf type {@code clarifai.api.StatValueAggregateQuery}
 */
public  final class StatValueAggregateQuery extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:clarifai.api.StatValueAggregateQuery)
    StatValueAggregateQueryOrBuilder {
private static final long serialVersionUID = 0L;
  // Use StatValueAggregateQuery.newBuilder() to construct.
  private StatValueAggregateQuery(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private StatValueAggregateQuery() {
    tags_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    tagGroups_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    statValueAggType_ = 0;
    statTimeAggType_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new StatValueAggregateQuery();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private StatValueAggregateQuery(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              tags_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            tags_.add(s);
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              tagGroups_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            tagGroups_.add(s);
            break;
          }
          case 24: {
            int rawValue = input.readEnum();

            statValueAggType_ = rawValue;
            break;
          }
          case 32: {
            int rawValue = input.readEnum();

            statTimeAggType_ = rawValue;
            break;
          }
          case 42: {
            com.google.protobuf.Timestamp.Builder subBuilder = null;
            if (startTime_ != null) {
              subBuilder = startTime_.toBuilder();
            }
            startTime_ = input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(startTime_);
              startTime_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            com.google.protobuf.Timestamp.Builder subBuilder = null;
            if (endTime_ != null) {
              subBuilder = endTime_.toBuilder();
            }
            endTime_ = input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(endTime_);
              endTime_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        tags_ = tags_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        tagGroups_ = tagGroups_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.clarifai.grpc.api.Resources.internal_static_clarifai_api_StatValueAggregateQuery_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.clarifai.grpc.api.Resources.internal_static_clarifai_api_StatValueAggregateQuery_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.clarifai.grpc.api.StatValueAggregateQuery.class, com.clarifai.grpc.api.StatValueAggregateQuery.Builder.class);
  }

  public static final int TAGS_FIELD_NUMBER = 1;
  private com.google.protobuf.LazyStringList tags_;
  /**
   * <pre>
   * These tags are used to filter down the values before they are aggregated. For example,
   * if you want to aggregate values for "task_id:a" you could specify that as a tag here.
   * </pre>
   *
   * <code>repeated string tags = 1;</code>
   * @return A list containing the tags.
   */
  public com.google.protobuf.ProtocolStringList
      getTagsList() {
    return tags_;
  }
  /**
   * <pre>
   * These tags are used to filter down the values before they are aggregated. For example,
   * if you want to aggregate values for "task_id:a" you could specify that as a tag here.
   * </pre>
   *
   * <code>repeated string tags = 1;</code>
   * @return The count of tags.
   */
  public int getTagsCount() {
    return tags_.size();
  }
  /**
   * <pre>
   * These tags are used to filter down the values before they are aggregated. For example,
   * if you want to aggregate values for "task_id:a" you could specify that as a tag here.
   * </pre>
   *
   * <code>repeated string tags = 1;</code>
   * @param index The index of the element to return.
   * @return The tags at the given index.
   */
  public java.lang.String getTags(int index) {
    return tags_.get(index);
  }
  /**
   * <pre>
   * These tags are used to filter down the values before they are aggregated. For example,
   * if you want to aggregate values for "task_id:a" you could specify that as a tag here.
   * </pre>
   *
   * <code>repeated string tags = 1;</code>
   * @param index The index of the value to return.
   * @return The bytes of the tags at the given index.
   */
  public com.google.protobuf.ByteString
      getTagsBytes(int index) {
    return tags_.getByteString(index);
  }

  public static final int TAG_GROUPS_FIELD_NUMBER = 2;
  private com.google.protobuf.LazyStringList tagGroups_;
  /**
   * <pre>
   * These are tag groups to aggregate over. So for example if you added stat values with tags
   * "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
   * aggregation would return StatValueAggregate values for each task_id. If you provide more than
   * one tag_group the response will return all rolled up combinations of them. For example
   * ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
   * values then you'd get StatValueAggregate values back for:
   * task_id | something
   * a       | 1
   * a       | 2
   * b       | 1
   * b       | 1
   * </pre>
   *
   * <code>repeated string tag_groups = 2;</code>
   * @return A list containing the tagGroups.
   */
  public com.google.protobuf.ProtocolStringList
      getTagGroupsList() {
    return tagGroups_;
  }
  /**
   * <pre>
   * These are tag groups to aggregate over. So for example if you added stat values with tags
   * "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
   * aggregation would return StatValueAggregate values for each task_id. If you provide more than
   * one tag_group the response will return all rolled up combinations of them. For example
   * ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
   * values then you'd get StatValueAggregate values back for:
   * task_id | something
   * a       | 1
   * a       | 2
   * b       | 1
   * b       | 1
   * </pre>
   *
   * <code>repeated string tag_groups = 2;</code>
   * @return The count of tagGroups.
   */
  public int getTagGroupsCount() {
    return tagGroups_.size();
  }
  /**
   * <pre>
   * These are tag groups to aggregate over. So for example if you added stat values with tags
   * "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
   * aggregation would return StatValueAggregate values for each task_id. If you provide more than
   * one tag_group the response will return all rolled up combinations of them. For example
   * ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
   * values then you'd get StatValueAggregate values back for:
   * task_id | something
   * a       | 1
   * a       | 2
   * b       | 1
   * b       | 1
   * </pre>
   *
   * <code>repeated string tag_groups = 2;</code>
   * @param index The index of the element to return.
   * @return The tagGroups at the given index.
   */
  public java.lang.String getTagGroups(int index) {
    return tagGroups_.get(index);
  }
  /**
   * <pre>
   * These are tag groups to aggregate over. So for example if you added stat values with tags
   * "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
   * aggregation would return StatValueAggregate values for each task_id. If you provide more than
   * one tag_group the response will return all rolled up combinations of them. For example
   * ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
   * values then you'd get StatValueAggregate values back for:
   * task_id | something
   * a       | 1
   * a       | 2
   * b       | 1
   * b       | 1
   * </pre>
   *
   * <code>repeated string tag_groups = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the tagGroups at the given index.
   */
  public com.google.protobuf.ByteString
      getTagGroupsBytes(int index) {
    return tagGroups_.getByteString(index);
  }

  public static final int STAT_VALUE_AGG_TYPE_FIELD_NUMBER = 3;
  private int statValueAggType_;
  /**
   * <pre>
   * Aggregation function to use over the values. Count(value) is also always returns.
   * Defaults to 'sum' if not provided.
   * </pre>
   *
   * <code>.clarifai.api.StatValueAggType stat_value_agg_type = 3;</code>
   * @return The enum numeric value on the wire for statValueAggType.
   */
  public int getStatValueAggTypeValue() {
    return statValueAggType_;
  }
  /**
   * <pre>
   * Aggregation function to use over the values. Count(value) is also always returns.
   * Defaults to 'sum' if not provided.
   * </pre>
   *
   * <code>.clarifai.api.StatValueAggType stat_value_agg_type = 3;</code>
   * @return The statValueAggType.
   */
  public com.clarifai.grpc.api.StatValueAggType getStatValueAggType() {
    @SuppressWarnings("deprecation")
    com.clarifai.grpc.api.StatValueAggType result = com.clarifai.grpc.api.StatValueAggType.valueOf(statValueAggType_);
    return result == null ? com.clarifai.grpc.api.StatValueAggType.UNRECOGNIZED : result;
  }

  public static final int STAT_TIME_AGG_TYPE_FIELD_NUMBER = 4;
  private int statTimeAggType_;
  /**
   * <pre>
   * Aggregation bins for time where the values will be aggregated at this bin granualarity.
   * And the "time" field will be returned in StatValueAggregate object.
   * If not provided then bins are not used, and all time is aggregated over.
   * </pre>
   *
   * <code>.clarifai.api.StatTimeAggType stat_time_agg_type = 4;</code>
   * @return The enum numeric value on the wire for statTimeAggType.
   */
  public int getStatTimeAggTypeValue() {
    return statTimeAggType_;
  }
  /**
   * <pre>
   * Aggregation bins for time where the values will be aggregated at this bin granualarity.
   * And the "time" field will be returned in StatValueAggregate object.
   * If not provided then bins are not used, and all time is aggregated over.
   * </pre>
   *
   * <code>.clarifai.api.StatTimeAggType stat_time_agg_type = 4;</code>
   * @return The statTimeAggType.
   */
  public com.clarifai.grpc.api.StatTimeAggType getStatTimeAggType() {
    @SuppressWarnings("deprecation")
    com.clarifai.grpc.api.StatTimeAggType result = com.clarifai.grpc.api.StatTimeAggType.valueOf(statTimeAggType_);
    return result == null ? com.clarifai.grpc.api.StatTimeAggType.UNRECOGNIZED : result;
  }

  public static final int START_TIME_FIELD_NUMBER = 5;
  private com.google.protobuf.Timestamp startTime_;
  /**
   * <pre>
   * If provided the time range over which values will be &gt;= this time. If not provided then
   * all values will be used back to start of time.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 5;</code>
   * @return Whether the startTime field is set.
   */
  public boolean hasStartTime() {
    return startTime_ != null;
  }
  /**
   * <pre>
   * If provided the time range over which values will be &gt;= this time. If not provided then
   * all values will be used back to start of time.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 5;</code>
   * @return The startTime.
   */
  public com.google.protobuf.Timestamp getStartTime() {
    return startTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
  }
  /**
   * <pre>
   * If provided the time range over which values will be &gt;= this time. If not provided then
   * all values will be used back to start of time.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 5;</code>
   */
  public com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder() {
    return getStartTime();
  }

  public static final int END_TIME_FIELD_NUMBER = 6;
  private com.google.protobuf.Timestamp endTime_;
  /**
   * <pre>
   * If provided the time range over which values will be &lt;= this time. If not provided then all
   * values will be used up until now().
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 6;</code>
   * @return Whether the endTime field is set.
   */
  public boolean hasEndTime() {
    return endTime_ != null;
  }
  /**
   * <pre>
   * If provided the time range over which values will be &lt;= this time. If not provided then all
   * values will be used up until now().
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 6;</code>
   * @return The endTime.
   */
  public com.google.protobuf.Timestamp getEndTime() {
    return endTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : endTime_;
  }
  /**
   * <pre>
   * If provided the time range over which values will be &lt;= this time. If not provided then all
   * values will be used up until now().
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 6;</code>
   */
  public com.google.protobuf.TimestampOrBuilder getEndTimeOrBuilder() {
    return getEndTime();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < tags_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, tags_.getRaw(i));
    }
    for (int i = 0; i < tagGroups_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, tagGroups_.getRaw(i));
    }
    if (statValueAggType_ != com.clarifai.grpc.api.StatValueAggType.SUM.getNumber()) {
      output.writeEnum(3, statValueAggType_);
    }
    if (statTimeAggType_ != com.clarifai.grpc.api.StatTimeAggType.NO_TIME_AGG.getNumber()) {
      output.writeEnum(4, statTimeAggType_);
    }
    if (startTime_ != null) {
      output.writeMessage(5, getStartTime());
    }
    if (endTime_ != null) {
      output.writeMessage(6, getEndTime());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < tags_.size(); i++) {
        dataSize += computeStringSizeNoTag(tags_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getTagsList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < tagGroups_.size(); i++) {
        dataSize += computeStringSizeNoTag(tagGroups_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getTagGroupsList().size();
    }
    if (statValueAggType_ != com.clarifai.grpc.api.StatValueAggType.SUM.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, statValueAggType_);
    }
    if (statTimeAggType_ != com.clarifai.grpc.api.StatTimeAggType.NO_TIME_AGG.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, statTimeAggType_);
    }
    if (startTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getStartTime());
    }
    if (endTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getEndTime());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.clarifai.grpc.api.StatValueAggregateQuery)) {
      return super.equals(obj);
    }
    com.clarifai.grpc.api.StatValueAggregateQuery other = (com.clarifai.grpc.api.StatValueAggregateQuery) obj;

    if (!getTagsList()
        .equals(other.getTagsList())) return false;
    if (!getTagGroupsList()
        .equals(other.getTagGroupsList())) return false;
    if (statValueAggType_ != other.statValueAggType_) return false;
    if (statTimeAggType_ != other.statTimeAggType_) return false;
    if (hasStartTime() != other.hasStartTime()) return false;
    if (hasStartTime()) {
      if (!getStartTime()
          .equals(other.getStartTime())) return false;
    }
    if (hasEndTime() != other.hasEndTime()) return false;
    if (hasEndTime()) {
      if (!getEndTime()
          .equals(other.getEndTime())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getTagsCount() > 0) {
      hash = (37 * hash) + TAGS_FIELD_NUMBER;
      hash = (53 * hash) + getTagsList().hashCode();
    }
    if (getTagGroupsCount() > 0) {
      hash = (37 * hash) + TAG_GROUPS_FIELD_NUMBER;
      hash = (53 * hash) + getTagGroupsList().hashCode();
    }
    hash = (37 * hash) + STAT_VALUE_AGG_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + statValueAggType_;
    hash = (37 * hash) + STAT_TIME_AGG_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + statTimeAggType_;
    if (hasStartTime()) {
      hash = (37 * hash) + START_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getStartTime().hashCode();
    }
    if (hasEndTime()) {
      hash = (37 * hash) + END_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getEndTime().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.clarifai.grpc.api.StatValueAggregateQuery parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.clarifai.grpc.api.StatValueAggregateQuery parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.clarifai.grpc.api.StatValueAggregateQuery parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.clarifai.grpc.api.StatValueAggregateQuery parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.clarifai.grpc.api.StatValueAggregateQuery parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.clarifai.grpc.api.StatValueAggregateQuery parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.clarifai.grpc.api.StatValueAggregateQuery parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.clarifai.grpc.api.StatValueAggregateQuery parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.clarifai.grpc.api.StatValueAggregateQuery parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.clarifai.grpc.api.StatValueAggregateQuery parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.clarifai.grpc.api.StatValueAggregateQuery parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.clarifai.grpc.api.StatValueAggregateQuery parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.clarifai.grpc.api.StatValueAggregateQuery prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * StatValueAggregateQuery
   * </pre>
   *
   * Protobuf type {@code clarifai.api.StatValueAggregateQuery}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:clarifai.api.StatValueAggregateQuery)
      com.clarifai.grpc.api.StatValueAggregateQueryOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.clarifai.grpc.api.Resources.internal_static_clarifai_api_StatValueAggregateQuery_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.clarifai.grpc.api.Resources.internal_static_clarifai_api_StatValueAggregateQuery_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.clarifai.grpc.api.StatValueAggregateQuery.class, com.clarifai.grpc.api.StatValueAggregateQuery.Builder.class);
    }

    // Construct using com.clarifai.grpc.api.StatValueAggregateQuery.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      tags_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      tagGroups_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      statValueAggType_ = 0;

      statTimeAggType_ = 0;

      if (startTimeBuilder_ == null) {
        startTime_ = null;
      } else {
        startTime_ = null;
        startTimeBuilder_ = null;
      }
      if (endTimeBuilder_ == null) {
        endTime_ = null;
      } else {
        endTime_ = null;
        endTimeBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.clarifai.grpc.api.Resources.internal_static_clarifai_api_StatValueAggregateQuery_descriptor;
    }

    @java.lang.Override
    public com.clarifai.grpc.api.StatValueAggregateQuery getDefaultInstanceForType() {
      return com.clarifai.grpc.api.StatValueAggregateQuery.getDefaultInstance();
    }

    @java.lang.Override
    public com.clarifai.grpc.api.StatValueAggregateQuery build() {
      com.clarifai.grpc.api.StatValueAggregateQuery result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.clarifai.grpc.api.StatValueAggregateQuery buildPartial() {
      com.clarifai.grpc.api.StatValueAggregateQuery result = new com.clarifai.grpc.api.StatValueAggregateQuery(this);
      int from_bitField0_ = bitField0_;
      if (((bitField0_ & 0x00000001) != 0)) {
        tags_ = tags_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.tags_ = tags_;
      if (((bitField0_ & 0x00000002) != 0)) {
        tagGroups_ = tagGroups_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.tagGroups_ = tagGroups_;
      result.statValueAggType_ = statValueAggType_;
      result.statTimeAggType_ = statTimeAggType_;
      if (startTimeBuilder_ == null) {
        result.startTime_ = startTime_;
      } else {
        result.startTime_ = startTimeBuilder_.build();
      }
      if (endTimeBuilder_ == null) {
        result.endTime_ = endTime_;
      } else {
        result.endTime_ = endTimeBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.clarifai.grpc.api.StatValueAggregateQuery) {
        return mergeFrom((com.clarifai.grpc.api.StatValueAggregateQuery)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.clarifai.grpc.api.StatValueAggregateQuery other) {
      if (other == com.clarifai.grpc.api.StatValueAggregateQuery.getDefaultInstance()) return this;
      if (!other.tags_.isEmpty()) {
        if (tags_.isEmpty()) {
          tags_ = other.tags_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureTagsIsMutable();
          tags_.addAll(other.tags_);
        }
        onChanged();
      }
      if (!other.tagGroups_.isEmpty()) {
        if (tagGroups_.isEmpty()) {
          tagGroups_ = other.tagGroups_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureTagGroupsIsMutable();
          tagGroups_.addAll(other.tagGroups_);
        }
        onChanged();
      }
      if (other.statValueAggType_ != 0) {
        setStatValueAggTypeValue(other.getStatValueAggTypeValue());
      }
      if (other.statTimeAggType_ != 0) {
        setStatTimeAggTypeValue(other.getStatTimeAggTypeValue());
      }
      if (other.hasStartTime()) {
        mergeStartTime(other.getStartTime());
      }
      if (other.hasEndTime()) {
        mergeEndTime(other.getEndTime());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.clarifai.grpc.api.StatValueAggregateQuery parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.clarifai.grpc.api.StatValueAggregateQuery) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.LazyStringList tags_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureTagsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        tags_ = new com.google.protobuf.LazyStringArrayList(tags_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * These tags are used to filter down the values before they are aggregated. For example,
     * if you want to aggregate values for "task_id:a" you could specify that as a tag here.
     * </pre>
     *
     * <code>repeated string tags = 1;</code>
     * @return A list containing the tags.
     */
    public com.google.protobuf.ProtocolStringList
        getTagsList() {
      return tags_.getUnmodifiableView();
    }
    /**
     * <pre>
     * These tags are used to filter down the values before they are aggregated. For example,
     * if you want to aggregate values for "task_id:a" you could specify that as a tag here.
     * </pre>
     *
     * <code>repeated string tags = 1;</code>
     * @return The count of tags.
     */
    public int getTagsCount() {
      return tags_.size();
    }
    /**
     * <pre>
     * These tags are used to filter down the values before they are aggregated. For example,
     * if you want to aggregate values for "task_id:a" you could specify that as a tag here.
     * </pre>
     *
     * <code>repeated string tags = 1;</code>
     * @param index The index of the element to return.
     * @return The tags at the given index.
     */
    public java.lang.String getTags(int index) {
      return tags_.get(index);
    }
    /**
     * <pre>
     * These tags are used to filter down the values before they are aggregated. For example,
     * if you want to aggregate values for "task_id:a" you could specify that as a tag here.
     * </pre>
     *
     * <code>repeated string tags = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the tags at the given index.
     */
    public com.google.protobuf.ByteString
        getTagsBytes(int index) {
      return tags_.getByteString(index);
    }
    /**
     * <pre>
     * These tags are used to filter down the values before they are aggregated. For example,
     * if you want to aggregate values for "task_id:a" you could specify that as a tag here.
     * </pre>
     *
     * <code>repeated string tags = 1;</code>
     * @param index The index to set the value at.
     * @param value The tags to set.
     * @return This builder for chaining.
     */
    public Builder setTags(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureTagsIsMutable();
      tags_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * These tags are used to filter down the values before they are aggregated. For example,
     * if you want to aggregate values for "task_id:a" you could specify that as a tag here.
     * </pre>
     *
     * <code>repeated string tags = 1;</code>
     * @param value The tags to add.
     * @return This builder for chaining.
     */
    public Builder addTags(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureTagsIsMutable();
      tags_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * These tags are used to filter down the values before they are aggregated. For example,
     * if you want to aggregate values for "task_id:a" you could specify that as a tag here.
     * </pre>
     *
     * <code>repeated string tags = 1;</code>
     * @param values The tags to add.
     * @return This builder for chaining.
     */
    public Builder addAllTags(
        java.lang.Iterable<java.lang.String> values) {
      ensureTagsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, tags_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * These tags are used to filter down the values before they are aggregated. For example,
     * if you want to aggregate values for "task_id:a" you could specify that as a tag here.
     * </pre>
     *
     * <code>repeated string tags = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearTags() {
      tags_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * These tags are used to filter down the values before they are aggregated. For example,
     * if you want to aggregate values for "task_id:a" you could specify that as a tag here.
     * </pre>
     *
     * <code>repeated string tags = 1;</code>
     * @param value The bytes of the tags to add.
     * @return This builder for chaining.
     */
    public Builder addTagsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureTagsIsMutable();
      tags_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList tagGroups_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureTagGroupsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        tagGroups_ = new com.google.protobuf.LazyStringArrayList(tagGroups_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * These are tag groups to aggregate over. So for example if you added stat values with tags
     * "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
     * aggregation would return StatValueAggregate values for each task_id. If you provide more than
     * one tag_group the response will return all rolled up combinations of them. For example
     * ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
     * values then you'd get StatValueAggregate values back for:
     * task_id | something
     * a       | 1
     * a       | 2
     * b       | 1
     * b       | 1
     * </pre>
     *
     * <code>repeated string tag_groups = 2;</code>
     * @return A list containing the tagGroups.
     */
    public com.google.protobuf.ProtocolStringList
        getTagGroupsList() {
      return tagGroups_.getUnmodifiableView();
    }
    /**
     * <pre>
     * These are tag groups to aggregate over. So for example if you added stat values with tags
     * "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
     * aggregation would return StatValueAggregate values for each task_id. If you provide more than
     * one tag_group the response will return all rolled up combinations of them. For example
     * ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
     * values then you'd get StatValueAggregate values back for:
     * task_id | something
     * a       | 1
     * a       | 2
     * b       | 1
     * b       | 1
     * </pre>
     *
     * <code>repeated string tag_groups = 2;</code>
     * @return The count of tagGroups.
     */
    public int getTagGroupsCount() {
      return tagGroups_.size();
    }
    /**
     * <pre>
     * These are tag groups to aggregate over. So for example if you added stat values with tags
     * "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
     * aggregation would return StatValueAggregate values for each task_id. If you provide more than
     * one tag_group the response will return all rolled up combinations of them. For example
     * ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
     * values then you'd get StatValueAggregate values back for:
     * task_id | something
     * a       | 1
     * a       | 2
     * b       | 1
     * b       | 1
     * </pre>
     *
     * <code>repeated string tag_groups = 2;</code>
     * @param index The index of the element to return.
     * @return The tagGroups at the given index.
     */
    public java.lang.String getTagGroups(int index) {
      return tagGroups_.get(index);
    }
    /**
     * <pre>
     * These are tag groups to aggregate over. So for example if you added stat values with tags
     * "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
     * aggregation would return StatValueAggregate values for each task_id. If you provide more than
     * one tag_group the response will return all rolled up combinations of them. For example
     * ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
     * values then you'd get StatValueAggregate values back for:
     * task_id | something
     * a       | 1
     * a       | 2
     * b       | 1
     * b       | 1
     * </pre>
     *
     * <code>repeated string tag_groups = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the tagGroups at the given index.
     */
    public com.google.protobuf.ByteString
        getTagGroupsBytes(int index) {
      return tagGroups_.getByteString(index);
    }
    /**
     * <pre>
     * These are tag groups to aggregate over. So for example if you added stat values with tags
     * "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
     * aggregation would return StatValueAggregate values for each task_id. If you provide more than
     * one tag_group the response will return all rolled up combinations of them. For example
     * ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
     * values then you'd get StatValueAggregate values back for:
     * task_id | something
     * a       | 1
     * a       | 2
     * b       | 1
     * b       | 1
     * </pre>
     *
     * <code>repeated string tag_groups = 2;</code>
     * @param index The index to set the value at.
     * @param value The tagGroups to set.
     * @return This builder for chaining.
     */
    public Builder setTagGroups(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureTagGroupsIsMutable();
      tagGroups_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * These are tag groups to aggregate over. So for example if you added stat values with tags
     * "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
     * aggregation would return StatValueAggregate values for each task_id. If you provide more than
     * one tag_group the response will return all rolled up combinations of them. For example
     * ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
     * values then you'd get StatValueAggregate values back for:
     * task_id | something
     * a       | 1
     * a       | 2
     * b       | 1
     * b       | 1
     * </pre>
     *
     * <code>repeated string tag_groups = 2;</code>
     * @param value The tagGroups to add.
     * @return This builder for chaining.
     */
    public Builder addTagGroups(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureTagGroupsIsMutable();
      tagGroups_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * These are tag groups to aggregate over. So for example if you added stat values with tags
     * "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
     * aggregation would return StatValueAggregate values for each task_id. If you provide more than
     * one tag_group the response will return all rolled up combinations of them. For example
     * ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
     * values then you'd get StatValueAggregate values back for:
     * task_id | something
     * a       | 1
     * a       | 2
     * b       | 1
     * b       | 1
     * </pre>
     *
     * <code>repeated string tag_groups = 2;</code>
     * @param values The tagGroups to add.
     * @return This builder for chaining.
     */
    public Builder addAllTagGroups(
        java.lang.Iterable<java.lang.String> values) {
      ensureTagGroupsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, tagGroups_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * These are tag groups to aggregate over. So for example if you added stat values with tags
     * "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
     * aggregation would return StatValueAggregate values for each task_id. If you provide more than
     * one tag_group the response will return all rolled up combinations of them. For example
     * ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
     * values then you'd get StatValueAggregate values back for:
     * task_id | something
     * a       | 1
     * a       | 2
     * b       | 1
     * b       | 1
     * </pre>
     *
     * <code>repeated string tag_groups = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearTagGroups() {
      tagGroups_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * These are tag groups to aggregate over. So for example if you added stat values with tags
     * "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
     * aggregation would return StatValueAggregate values for each task_id. If you provide more than
     * one tag_group the response will return all rolled up combinations of them. For example
     * ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
     * values then you'd get StatValueAggregate values back for:
     * task_id | something
     * a       | 1
     * a       | 2
     * b       | 1
     * b       | 1
     * </pre>
     *
     * <code>repeated string tag_groups = 2;</code>
     * @param value The bytes of the tagGroups to add.
     * @return This builder for chaining.
     */
    public Builder addTagGroupsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureTagGroupsIsMutable();
      tagGroups_.add(value);
      onChanged();
      return this;
    }

    private int statValueAggType_ = 0;
    /**
     * <pre>
     * Aggregation function to use over the values. Count(value) is also always returns.
     * Defaults to 'sum' if not provided.
     * </pre>
     *
     * <code>.clarifai.api.StatValueAggType stat_value_agg_type = 3;</code>
     * @return The enum numeric value on the wire for statValueAggType.
     */
    public int getStatValueAggTypeValue() {
      return statValueAggType_;
    }
    /**
     * <pre>
     * Aggregation function to use over the values. Count(value) is also always returns.
     * Defaults to 'sum' if not provided.
     * </pre>
     *
     * <code>.clarifai.api.StatValueAggType stat_value_agg_type = 3;</code>
     * @param value The enum numeric value on the wire for statValueAggType to set.
     * @return This builder for chaining.
     */
    public Builder setStatValueAggTypeValue(int value) {
      statValueAggType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Aggregation function to use over the values. Count(value) is also always returns.
     * Defaults to 'sum' if not provided.
     * </pre>
     *
     * <code>.clarifai.api.StatValueAggType stat_value_agg_type = 3;</code>
     * @return The statValueAggType.
     */
    public com.clarifai.grpc.api.StatValueAggType getStatValueAggType() {
      @SuppressWarnings("deprecation")
      com.clarifai.grpc.api.StatValueAggType result = com.clarifai.grpc.api.StatValueAggType.valueOf(statValueAggType_);
      return result == null ? com.clarifai.grpc.api.StatValueAggType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Aggregation function to use over the values. Count(value) is also always returns.
     * Defaults to 'sum' if not provided.
     * </pre>
     *
     * <code>.clarifai.api.StatValueAggType stat_value_agg_type = 3;</code>
     * @param value The statValueAggType to set.
     * @return This builder for chaining.
     */
    public Builder setStatValueAggType(com.clarifai.grpc.api.StatValueAggType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      statValueAggType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Aggregation function to use over the values. Count(value) is also always returns.
     * Defaults to 'sum' if not provided.
     * </pre>
     *
     * <code>.clarifai.api.StatValueAggType stat_value_agg_type = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearStatValueAggType() {
      
      statValueAggType_ = 0;
      onChanged();
      return this;
    }

    private int statTimeAggType_ = 0;
    /**
     * <pre>
     * Aggregation bins for time where the values will be aggregated at this bin granualarity.
     * And the "time" field will be returned in StatValueAggregate object.
     * If not provided then bins are not used, and all time is aggregated over.
     * </pre>
     *
     * <code>.clarifai.api.StatTimeAggType stat_time_agg_type = 4;</code>
     * @return The enum numeric value on the wire for statTimeAggType.
     */
    public int getStatTimeAggTypeValue() {
      return statTimeAggType_;
    }
    /**
     * <pre>
     * Aggregation bins for time where the values will be aggregated at this bin granualarity.
     * And the "time" field will be returned in StatValueAggregate object.
     * If not provided then bins are not used, and all time is aggregated over.
     * </pre>
     *
     * <code>.clarifai.api.StatTimeAggType stat_time_agg_type = 4;</code>
     * @param value The enum numeric value on the wire for statTimeAggType to set.
     * @return This builder for chaining.
     */
    public Builder setStatTimeAggTypeValue(int value) {
      statTimeAggType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Aggregation bins for time where the values will be aggregated at this bin granualarity.
     * And the "time" field will be returned in StatValueAggregate object.
     * If not provided then bins are not used, and all time is aggregated over.
     * </pre>
     *
     * <code>.clarifai.api.StatTimeAggType stat_time_agg_type = 4;</code>
     * @return The statTimeAggType.
     */
    public com.clarifai.grpc.api.StatTimeAggType getStatTimeAggType() {
      @SuppressWarnings("deprecation")
      com.clarifai.grpc.api.StatTimeAggType result = com.clarifai.grpc.api.StatTimeAggType.valueOf(statTimeAggType_);
      return result == null ? com.clarifai.grpc.api.StatTimeAggType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Aggregation bins for time where the values will be aggregated at this bin granualarity.
     * And the "time" field will be returned in StatValueAggregate object.
     * If not provided then bins are not used, and all time is aggregated over.
     * </pre>
     *
     * <code>.clarifai.api.StatTimeAggType stat_time_agg_type = 4;</code>
     * @param value The statTimeAggType to set.
     * @return This builder for chaining.
     */
    public Builder setStatTimeAggType(com.clarifai.grpc.api.StatTimeAggType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      statTimeAggType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Aggregation bins for time where the values will be aggregated at this bin granualarity.
     * And the "time" field will be returned in StatValueAggregate object.
     * If not provided then bins are not used, and all time is aggregated over.
     * </pre>
     *
     * <code>.clarifai.api.StatTimeAggType stat_time_agg_type = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearStatTimeAggType() {
      
      statTimeAggType_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.Timestamp startTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> startTimeBuilder_;
    /**
     * <pre>
     * If provided the time range over which values will be &gt;= this time. If not provided then
     * all values will be used back to start of time.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     * @return Whether the startTime field is set.
     */
    public boolean hasStartTime() {
      return startTimeBuilder_ != null || startTime_ != null;
    }
    /**
     * <pre>
     * If provided the time range over which values will be &gt;= this time. If not provided then
     * all values will be used back to start of time.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     * @return The startTime.
     */
    public com.google.protobuf.Timestamp getStartTime() {
      if (startTimeBuilder_ == null) {
        return startTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
      } else {
        return startTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If provided the time range over which values will be &gt;= this time. If not provided then
     * all values will be used back to start of time.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    public Builder setStartTime(com.google.protobuf.Timestamp value) {
      if (startTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        startTime_ = value;
        onChanged();
      } else {
        startTimeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * If provided the time range over which values will be &gt;= this time. If not provided then
     * all values will be used back to start of time.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    public Builder setStartTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (startTimeBuilder_ == null) {
        startTime_ = builderForValue.build();
        onChanged();
      } else {
        startTimeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * If provided the time range over which values will be &gt;= this time. If not provided then
     * all values will be used back to start of time.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    public Builder mergeStartTime(com.google.protobuf.Timestamp value) {
      if (startTimeBuilder_ == null) {
        if (startTime_ != null) {
          startTime_ =
            com.google.protobuf.Timestamp.newBuilder(startTime_).mergeFrom(value).buildPartial();
        } else {
          startTime_ = value;
        }
        onChanged();
      } else {
        startTimeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * If provided the time range over which values will be &gt;= this time. If not provided then
     * all values will be used back to start of time.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    public Builder clearStartTime() {
      if (startTimeBuilder_ == null) {
        startTime_ = null;
        onChanged();
      } else {
        startTime_ = null;
        startTimeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * If provided the time range over which values will be &gt;= this time. If not provided then
     * all values will be used back to start of time.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    public com.google.protobuf.Timestamp.Builder getStartTimeBuilder() {
      
      onChanged();
      return getStartTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If provided the time range over which values will be &gt;= this time. If not provided then
     * all values will be used back to start of time.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder() {
      if (startTimeBuilder_ != null) {
        return startTimeBuilder_.getMessageOrBuilder();
      } else {
        return startTime_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
      }
    }
    /**
     * <pre>
     * If provided the time range over which values will be &gt;= this time. If not provided then
     * all values will be used back to start of time.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getStartTimeFieldBuilder() {
      if (startTimeBuilder_ == null) {
        startTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getStartTime(),
                getParentForChildren(),
                isClean());
        startTime_ = null;
      }
      return startTimeBuilder_;
    }

    private com.google.protobuf.Timestamp endTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> endTimeBuilder_;
    /**
     * <pre>
     * If provided the time range over which values will be &lt;= this time. If not provided then all
     * values will be used up until now().
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 6;</code>
     * @return Whether the endTime field is set.
     */
    public boolean hasEndTime() {
      return endTimeBuilder_ != null || endTime_ != null;
    }
    /**
     * <pre>
     * If provided the time range over which values will be &lt;= this time. If not provided then all
     * values will be used up until now().
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 6;</code>
     * @return The endTime.
     */
    public com.google.protobuf.Timestamp getEndTime() {
      if (endTimeBuilder_ == null) {
        return endTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : endTime_;
      } else {
        return endTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If provided the time range over which values will be &lt;= this time. If not provided then all
     * values will be used up until now().
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 6;</code>
     */
    public Builder setEndTime(com.google.protobuf.Timestamp value) {
      if (endTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        endTime_ = value;
        onChanged();
      } else {
        endTimeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * If provided the time range over which values will be &lt;= this time. If not provided then all
     * values will be used up until now().
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 6;</code>
     */
    public Builder setEndTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (endTimeBuilder_ == null) {
        endTime_ = builderForValue.build();
        onChanged();
      } else {
        endTimeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * If provided the time range over which values will be &lt;= this time. If not provided then all
     * values will be used up until now().
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 6;</code>
     */
    public Builder mergeEndTime(com.google.protobuf.Timestamp value) {
      if (endTimeBuilder_ == null) {
        if (endTime_ != null) {
          endTime_ =
            com.google.protobuf.Timestamp.newBuilder(endTime_).mergeFrom(value).buildPartial();
        } else {
          endTime_ = value;
        }
        onChanged();
      } else {
        endTimeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * If provided the time range over which values will be &lt;= this time. If not provided then all
     * values will be used up until now().
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 6;</code>
     */
    public Builder clearEndTime() {
      if (endTimeBuilder_ == null) {
        endTime_ = null;
        onChanged();
      } else {
        endTime_ = null;
        endTimeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * If provided the time range over which values will be &lt;= this time. If not provided then all
     * values will be used up until now().
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 6;</code>
     */
    public com.google.protobuf.Timestamp.Builder getEndTimeBuilder() {
      
      onChanged();
      return getEndTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If provided the time range over which values will be &lt;= this time. If not provided then all
     * values will be used up until now().
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 6;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getEndTimeOrBuilder() {
      if (endTimeBuilder_ != null) {
        return endTimeBuilder_.getMessageOrBuilder();
      } else {
        return endTime_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : endTime_;
      }
    }
    /**
     * <pre>
     * If provided the time range over which values will be &lt;= this time. If not provided then all
     * values will be used up until now().
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getEndTimeFieldBuilder() {
      if (endTimeBuilder_ == null) {
        endTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getEndTime(),
                getParentForChildren(),
                isClean());
        endTime_ = null;
      }
      return endTimeBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:clarifai.api.StatValueAggregateQuery)
  }

  // @@protoc_insertion_point(class_scope:clarifai.api.StatValueAggregateQuery)
  private static final com.clarifai.grpc.api.StatValueAggregateQuery DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.clarifai.grpc.api.StatValueAggregateQuery();
  }

  public static com.clarifai.grpc.api.StatValueAggregateQuery getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<StatValueAggregateQuery>
      PARSER = new com.google.protobuf.AbstractParser<StatValueAggregateQuery>() {
    @java.lang.Override
    public StatValueAggregateQuery parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new StatValueAggregateQuery(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<StatValueAggregateQuery> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<StatValueAggregateQuery> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.clarifai.grpc.api.StatValueAggregateQuery getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

