// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/resources.proto

package com.clarifai.grpc.api;

public interface PasswordViolationsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:clarifai.api.PasswordViolations)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * when new password length is shorter than minimum length set
   * </pre>
   *
   * <code>bool minimum_length = 1;</code>
   * @return The minimumLength.
   */
  boolean getMinimumLength();

  /**
   * <pre>
   * when new password length is longer than maximum length set
   * </pre>
   *
   * <code>bool maximum_length = 2;</code>
   * @return The maximumLength.
   */
  boolean getMaximumLength();

  /**
   * <pre>
   * there is no upper case letter in the new password when there should be at least one
   * </pre>
   *
   * <code>bool upper_case_needed = 3;</code>
   * @return The upperCaseNeeded.
   */
  boolean getUpperCaseNeeded();

  /**
   * <pre>
   * there is no lower case letter in the new password when there should be at least one
   * </pre>
   *
   * <code>bool lower_case_needed = 4;</code>
   * @return The lowerCaseNeeded.
   */
  boolean getLowerCaseNeeded();

  /**
   * <pre>
   * there is no numerics in the new password when there should be at least one
   * </pre>
   *
   * <code>bool numeric_needed = 5;</code>
   * @return The numericNeeded.
   */
  boolean getNumericNeeded();

  /**
   * <pre>
   * there is no special character in the new password when there should be at least one
   * </pre>
   *
   * <code>bool non_alphanumeric_needed = 6;</code>
   * @return The nonAlphanumericNeeded.
   */
  boolean getNonAlphanumericNeeded();

  /**
   * <pre>
   * when one of the N most recent old password is reused, N is specified by password_reuse_epoch in db.password_policies
   * </pre>
   *
   * <code>bool password_reuse = 7;</code>
   * @return The passwordReuse.
   */
  boolean getPasswordReuse();

  /**
   * <pre>
   * when either user's first, middle or last name is used in the new password
   * </pre>
   *
   * <code>bool exclude_names = 8;</code>
   * @return The excludeNames.
   */
  boolean getExcludeNames();

  /**
   * <pre>
   * when first part of user's email (exact string or after removing special characters) is used in the new password
   * </pre>
   *
   * <code>bool exclude_email = 9;</code>
   * @return The excludeEmail.
   */
  boolean getExcludeEmail();

  /**
   * <pre>
   * when there are confusing letters in the new password, such as o (first character of 'omega') vs 0 (zero)
   * </pre>
   *
   * <code>bool no_confusing_letters = 10;</code>
   * @return The noConfusingLetters.
   */
  boolean getNoConfusingLetters();

  /**
   * <pre>
   * when there are simple password patterns used, such as 12345678 or aaaaaaa1
   * </pre>
   *
   * <code>bool no_simple_passwords = 11;</code>
   * @return The noSimplePasswords.
   */
  boolean getNoSimplePasswords();

  /**
   * <pre>
   * when there are common vocabs from the common vocab list used
   * </pre>
   *
   * <code>bool no_common_vocabs = 12;</code>
   * @return The noCommonVocabs.
   */
  boolean getNoCommonVocabs();

  /**
   * <pre>
   * when the current password is contained in the new password or vice versa
   * </pre>
   *
   * <code>bool no_overlap_with_old = 13;</code>
   * @return The noOverlapWithOld.
   */
  boolean getNoOverlapWithOld();

  /**
   * <pre>
   * when password has to be changed becauase it's too old
   * </pre>
   *
   * <code>bool password_lifespan = 14;</code>
   * @return The passwordLifespan.
   */
  boolean getPasswordLifespan();
}
