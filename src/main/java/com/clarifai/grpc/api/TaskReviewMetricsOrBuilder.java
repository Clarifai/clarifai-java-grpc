// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/resources.proto

package com.clarifai.grpc.api;

public interface TaskReviewMetricsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:clarifai.api.TaskReviewMetrics)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Estimated number of fully reviewed inputs.
   * An input is considered fully reviewed if it has been reviewed by all necessary reviewers.
   * Example: if task has no review, then an input is considered fully reviewed right after it's labeled (as review is skipped).
   * Example: if task has manual review with single-reviewer per input, then an input is considered fully reviewed when 1 reviewer has approved/rejected it.
   * Example: if task has consensus review with 3 reviewers per input, then an input is considered fully reviewed when 3 reviewers have approved it or 1 reviewer has rejected it.
   * </pre>
   *
   * <code>uint64 inputs_count_estimated = 1;</code>
   * @return The inputsCountEstimated.
   */
  long getInputsCountEstimated();

  /**
   * <pre>
   * Estimated percent of review work that was finished.
   * This is a value between 0 and 100, where 0 = 0% and 100 = 100%.
   * Calculated as inputs_count_estimated/task.metrics.input_source.inputs_count_estimated.
   * As the counts are estimated, the percentage is also estimated.
   * However, additional checks are made to ensure that 100% percentage is only returned when all inputs are reviewed - giving a guarantee that the 100% percentage is always accurate.
   * </pre>
   *
   * <code>uint32 inputs_percent_estimated = 2;</code>
   * @return The inputsPercentEstimated.
   */
  int getInputsPercentEstimated();

  /**
   * <pre>
   * Estimated number of reviewed inputs per reviewer index.
   * The reviewer indexes are based on task.review.users.
   * An input is considered reviewed by a reviewer if:
   * * the reviewer approved the input
   * * the reviewer rejected the input
   * Note that when a reviewer requests changes for an input, the input is sent to back to work again, so the whole work &amp; review process is restarted.
   * The reviewer will have to review the input again after work has been completed.
   * As such, the review that requests changes for an input is immediately dis-regarded and not counted in this metric.
   * </pre>
   *
   * <code>repeated uint64 inputs_count_estimated_per_reviewer = 3;</code>
   * @return A list containing the inputsCountEstimatedPerReviewer.
   */
  java.util.List<java.lang.Long> getInputsCountEstimatedPerReviewerList();
  /**
   * <pre>
   * Estimated number of reviewed inputs per reviewer index.
   * The reviewer indexes are based on task.review.users.
   * An input is considered reviewed by a reviewer if:
   * * the reviewer approved the input
   * * the reviewer rejected the input
   * Note that when a reviewer requests changes for an input, the input is sent to back to work again, so the whole work &amp; review process is restarted.
   * The reviewer will have to review the input again after work has been completed.
   * As such, the review that requests changes for an input is immediately dis-regarded and not counted in this metric.
   * </pre>
   *
   * <code>repeated uint64 inputs_count_estimated_per_reviewer = 3;</code>
   * @return The count of inputsCountEstimatedPerReviewer.
   */
  int getInputsCountEstimatedPerReviewerCount();
  /**
   * <pre>
   * Estimated number of reviewed inputs per reviewer index.
   * The reviewer indexes are based on task.review.users.
   * An input is considered reviewed by a reviewer if:
   * * the reviewer approved the input
   * * the reviewer rejected the input
   * Note that when a reviewer requests changes for an input, the input is sent to back to work again, so the whole work &amp; review process is restarted.
   * The reviewer will have to review the input again after work has been completed.
   * As such, the review that requests changes for an input is immediately dis-regarded and not counted in this metric.
   * </pre>
   *
   * <code>repeated uint64 inputs_count_estimated_per_reviewer = 3;</code>
   * @param index The index of the element to return.
   * @return The inputsCountEstimatedPerReviewer at the given index.
   */
  long getInputsCountEstimatedPerReviewer(int index);

  /**
   * <pre>
   * The number of inputs actually available for review for each reviewer.
   * Most times, this equals task.metrics.input_source.inputs_count_estimated.
   * Several situations may result in different values:
   * * When task has no review, then this is 0 for each reviewer.
   * * When task has auto-annotation, then this number equals the inputs that have been auto-annotated with AWAITING_REVIEW status. All other inputs are considered completed by the auto-annotation process.
   * * When task has consensus review with approval_threshold_labelers &gt; 0, then it's possible that labelers will approve inputs through consensus, which skips review. In this case, the number of inputs available for review is less than task.metrics.input_source.inputs_count_estimated.
   * * When task has consensus review with approval_threshold_reviewers = 1, then all inputs are assigned only to one reviewer, so each reviewer will get only a part of the inputs to review. It's expected that the sum(inputs_reviewable_count_estimated) = task.metrics.input_source.inputs_count_estimated.
   * * When task has consensus review with approval_threshold_reviewers = -1, then all inputs are assigned to all reviewers. However, if an input is rejected, then rejection is final and all other reviewers will not review it. In this case, the number of inputs available for review for other reviewers will be less than task.metrics.input_source.inputs_count_estimated.
   * </pre>
   *
   * <code>repeated uint64 inputs_reviewable_count_estimated_per_reviewer = 4;</code>
   * @return A list containing the inputsReviewableCountEstimatedPerReviewer.
   */
  java.util.List<java.lang.Long> getInputsReviewableCountEstimatedPerReviewerList();
  /**
   * <pre>
   * The number of inputs actually available for review for each reviewer.
   * Most times, this equals task.metrics.input_source.inputs_count_estimated.
   * Several situations may result in different values:
   * * When task has no review, then this is 0 for each reviewer.
   * * When task has auto-annotation, then this number equals the inputs that have been auto-annotated with AWAITING_REVIEW status. All other inputs are considered completed by the auto-annotation process.
   * * When task has consensus review with approval_threshold_labelers &gt; 0, then it's possible that labelers will approve inputs through consensus, which skips review. In this case, the number of inputs available for review is less than task.metrics.input_source.inputs_count_estimated.
   * * When task has consensus review with approval_threshold_reviewers = 1, then all inputs are assigned only to one reviewer, so each reviewer will get only a part of the inputs to review. It's expected that the sum(inputs_reviewable_count_estimated) = task.metrics.input_source.inputs_count_estimated.
   * * When task has consensus review with approval_threshold_reviewers = -1, then all inputs are assigned to all reviewers. However, if an input is rejected, then rejection is final and all other reviewers will not review it. In this case, the number of inputs available for review for other reviewers will be less than task.metrics.input_source.inputs_count_estimated.
   * </pre>
   *
   * <code>repeated uint64 inputs_reviewable_count_estimated_per_reviewer = 4;</code>
   * @return The count of inputsReviewableCountEstimatedPerReviewer.
   */
  int getInputsReviewableCountEstimatedPerReviewerCount();
  /**
   * <pre>
   * The number of inputs actually available for review for each reviewer.
   * Most times, this equals task.metrics.input_source.inputs_count_estimated.
   * Several situations may result in different values:
   * * When task has no review, then this is 0 for each reviewer.
   * * When task has auto-annotation, then this number equals the inputs that have been auto-annotated with AWAITING_REVIEW status. All other inputs are considered completed by the auto-annotation process.
   * * When task has consensus review with approval_threshold_labelers &gt; 0, then it's possible that labelers will approve inputs through consensus, which skips review. In this case, the number of inputs available for review is less than task.metrics.input_source.inputs_count_estimated.
   * * When task has consensus review with approval_threshold_reviewers = 1, then all inputs are assigned only to one reviewer, so each reviewer will get only a part of the inputs to review. It's expected that the sum(inputs_reviewable_count_estimated) = task.metrics.input_source.inputs_count_estimated.
   * * When task has consensus review with approval_threshold_reviewers = -1, then all inputs are assigned to all reviewers. However, if an input is rejected, then rejection is final and all other reviewers will not review it. In this case, the number of inputs available for review for other reviewers will be less than task.metrics.input_source.inputs_count_estimated.
   * </pre>
   *
   * <code>repeated uint64 inputs_reviewable_count_estimated_per_reviewer = 4;</code>
   * @param index The index of the element to return.
   * @return The inputsReviewableCountEstimatedPerReviewer at the given index.
   */
  long getInputsReviewableCountEstimatedPerReviewer(int index);

  /**
   * <pre>
   * Estimated percent of review work that was finished per reviewer.
   * This is a value between 0 and 100, where 0 = 0% and 100 = 100%.
   * Calculated as inputs_count_estimated_per_reviewer/inputs_reviewable_count_estimated_per_reviewer.
   * As the counts are estimated, the percentage is also estimated.
   * However, additional checks are made to ensure that 100% percentage is only returned when all inputs are reviewed - giving a guarantee that the 100% percentage is always accurate.
   * </pre>
   *
   * <code>repeated uint32 inputs_percent_estimated_per_reviewer = 5;</code>
   * @return A list containing the inputsPercentEstimatedPerReviewer.
   */
  java.util.List<java.lang.Integer> getInputsPercentEstimatedPerReviewerList();
  /**
   * <pre>
   * Estimated percent of review work that was finished per reviewer.
   * This is a value between 0 and 100, where 0 = 0% and 100 = 100%.
   * Calculated as inputs_count_estimated_per_reviewer/inputs_reviewable_count_estimated_per_reviewer.
   * As the counts are estimated, the percentage is also estimated.
   * However, additional checks are made to ensure that 100% percentage is only returned when all inputs are reviewed - giving a guarantee that the 100% percentage is always accurate.
   * </pre>
   *
   * <code>repeated uint32 inputs_percent_estimated_per_reviewer = 5;</code>
   * @return The count of inputsPercentEstimatedPerReviewer.
   */
  int getInputsPercentEstimatedPerReviewerCount();
  /**
   * <pre>
   * Estimated percent of review work that was finished per reviewer.
   * This is a value between 0 and 100, where 0 = 0% and 100 = 100%.
   * Calculated as inputs_count_estimated_per_reviewer/inputs_reviewable_count_estimated_per_reviewer.
   * As the counts are estimated, the percentage is also estimated.
   * However, additional checks are made to ensure that 100% percentage is only returned when all inputs are reviewed - giving a guarantee that the 100% percentage is always accurate.
   * </pre>
   *
   * <code>repeated uint32 inputs_percent_estimated_per_reviewer = 5;</code>
   * @param index The index of the element to return.
   * @return The inputsPercentEstimatedPerReviewer at the given index.
   */
  int getInputsPercentEstimatedPerReviewer(int index);
}
