// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/service.proto

package com.clarifai.grpc.api;

public interface PostWorkflowResultsSimilarityRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:clarifai.api.PostWorkflowResultsSimilarityRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.clarifai.api.UserAppIDSet user_app_id = 1;</code>
   * @return Whether the userAppId field is set.
   */
  boolean hasUserAppId();
  /**
   * <code>.clarifai.api.UserAppIDSet user_app_id = 1;</code>
   * @return The userAppId.
   */
  com.clarifai.grpc.api.UserAppIDSet getUserAppId();
  /**
   * <code>.clarifai.api.UserAppIDSet user_app_id = 1;</code>
   */
  com.clarifai.grpc.api.UserAppIDSetOrBuilder getUserAppIdOrBuilder();

  /**
   * <code>string workflow_id = 2;</code>
   * @return The workflowId.
   */
  java.lang.String getWorkflowId();
  /**
   * <code>string workflow_id = 2;</code>
   * @return The bytes for workflowId.
   */
  com.google.protobuf.ByteString
      getWorkflowIdBytes();

  /**
   * <pre>
   * The specific model version whose outputs we are comparing
   * </pre>
   *
   * <code>string model_version_id = 3;</code>
   * @return The modelVersionId.
   */
  java.lang.String getModelVersionId();
  /**
   * <pre>
   * The specific model version whose outputs we are comparing
   * </pre>
   *
   * <code>string model_version_id = 3;</code>
   * @return The bytes for modelVersionId.
   */
  com.google.protobuf.ByteString
      getModelVersionIdBytes();

  /**
   * <pre>
   * Each probe is compared against every pool input
   * </pre>
   *
   * <code>repeated .clarifai.api.Input probe_inputs = 4;</code>
   */
  java.util.List<com.clarifai.grpc.api.Input> 
      getProbeInputsList();
  /**
   * <pre>
   * Each probe is compared against every pool input
   * </pre>
   *
   * <code>repeated .clarifai.api.Input probe_inputs = 4;</code>
   */
  com.clarifai.grpc.api.Input getProbeInputs(int index);
  /**
   * <pre>
   * Each probe is compared against every pool input
   * </pre>
   *
   * <code>repeated .clarifai.api.Input probe_inputs = 4;</code>
   */
  int getProbeInputsCount();
  /**
   * <pre>
   * Each probe is compared against every pool input
   * </pre>
   *
   * <code>repeated .clarifai.api.Input probe_inputs = 4;</code>
   */
  java.util.List<? extends com.clarifai.grpc.api.InputOrBuilder> 
      getProbeInputsOrBuilderList();
  /**
   * <pre>
   * Each probe is compared against every pool input
   * </pre>
   *
   * <code>repeated .clarifai.api.Input probe_inputs = 4;</code>
   */
  com.clarifai.grpc.api.InputOrBuilder getProbeInputsOrBuilder(
      int index);

  /**
   * <pre>
   * Each pool input is compared against ever probe input
   * </pre>
   *
   * <code>repeated .clarifai.api.Input pool_inputs = 5;</code>
   */
  java.util.List<com.clarifai.grpc.api.Input> 
      getPoolInputsList();
  /**
   * <pre>
   * Each pool input is compared against ever probe input
   * </pre>
   *
   * <code>repeated .clarifai.api.Input pool_inputs = 5;</code>
   */
  com.clarifai.grpc.api.Input getPoolInputs(int index);
  /**
   * <pre>
   * Each pool input is compared against ever probe input
   * </pre>
   *
   * <code>repeated .clarifai.api.Input pool_inputs = 5;</code>
   */
  int getPoolInputsCount();
  /**
   * <pre>
   * Each pool input is compared against ever probe input
   * </pre>
   *
   * <code>repeated .clarifai.api.Input pool_inputs = 5;</code>
   */
  java.util.List<? extends com.clarifai.grpc.api.InputOrBuilder> 
      getPoolInputsOrBuilderList();
  /**
   * <pre>
   * Each pool input is compared against ever probe input
   * </pre>
   *
   * <code>repeated .clarifai.api.Input pool_inputs = 5;</code>
   */
  com.clarifai.grpc.api.InputOrBuilder getPoolInputsOrBuilder(
      int index);

  /**
   * <pre>
   * Use this flag to look into clarifai published workflows first for a Workflow ID
   * </pre>
   *
   * <code>bool favor_clarifai_workflows = 6;</code>
   * @return The favorClarifaiWorkflows.
   */
  boolean getFavorClarifaiWorkflows();
}
