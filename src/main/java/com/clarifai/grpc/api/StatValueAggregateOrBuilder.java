// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/resources.proto

package com.clarifai.grpc.api;

public interface StatValueAggregateOrBuilder extends
    // @@protoc_insertion_point(interface_extends:clarifai.api.StatValueAggregate)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The time of the aggregation. For example, if you aggregate over "HOUR" buckets then you can
   * expect each hour that has atleast one value (matching the rest of your query fields) will have
   * a StatValueAggregate with the time filled into that hour.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp time = 1;</code>
   * @return Whether the time field is set.
   */
  boolean hasTime();
  /**
   * <pre>
   * The time of the aggregation. For example, if you aggregate over "HOUR" buckets then you can
   * expect each hour that has atleast one value (matching the rest of your query fields) will have
   * a StatValueAggregate with the time filled into that hour.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp time = 1;</code>
   * @return The time.
   */
  com.google.protobuf.Timestamp getTime();
  /**
   * <pre>
   * The time of the aggregation. For example, if you aggregate over "HOUR" buckets then you can
   * expect each hour that has atleast one value (matching the rest of your query fields) will have
   * a StatValueAggregate with the time filled into that hour.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp time = 1;</code>
   */
  com.google.protobuf.TimestampOrBuilder getTimeOrBuilder();

  /**
   * <pre>
   * The value aggregated according to the stat_value_agg_type
   * </pre>
   *
   * <code>float aggregate_value = 2;</code>
   * @return The aggregateValue.
   */
  float getAggregateValue();

  /**
   * <pre>
   * The count of the stat values that were used in this aggregation.
   * </pre>
   *
   * <code>uint64 count = 3;</code>
   * @return The count.
   */
  long getCount();

  /**
   * <pre>
   * The tags for this aggregated_value and count. This will be filled in if tag groups were used in
   * the query to group aggregations.
   * </pre>
   *
   * <code>repeated string tags = 4;</code>
   * @return A list containing the tags.
   */
  java.util.List<java.lang.String>
      getTagsList();
  /**
   * <pre>
   * The tags for this aggregated_value and count. This will be filled in if tag groups were used in
   * the query to group aggregations.
   * </pre>
   *
   * <code>repeated string tags = 4;</code>
   * @return The count of tags.
   */
  int getTagsCount();
  /**
   * <pre>
   * The tags for this aggregated_value and count. This will be filled in if tag groups were used in
   * the query to group aggregations.
   * </pre>
   *
   * <code>repeated string tags = 4;</code>
   * @param index The index of the element to return.
   * @return The tags at the given index.
   */
  java.lang.String getTags(int index);
  /**
   * <pre>
   * The tags for this aggregated_value and count. This will be filled in if tag groups were used in
   * the query to group aggregations.
   * </pre>
   *
   * <code>repeated string tags = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the tags at the given index.
   */
  com.google.protobuf.ByteString
      getTagsBytes(int index);
}
