// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/resources.proto

package com.clarifai.grpc.api;

public interface ConceptRelationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:clarifai.api.ConceptRelation)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * ID of the concept relation
   * </pre>
   *
   * <code>string id = 1;</code>
   * @return The id.
   */
  java.lang.String getId();
  /**
   * <pre>
   * ID of the concept relation
   * </pre>
   *
   * <code>string id = 1;</code>
   * @return The bytes for id.
   */
  com.google.protobuf.ByteString
      getIdBytes();

  /**
   * <pre>
   * The subject concept (i.e. source) of the concept relation
   * </pre>
   *
   * <code>.clarifai.api.Concept subject_concept = 2;</code>
   * @return Whether the subjectConcept field is set.
   */
  boolean hasSubjectConcept();
  /**
   * <pre>
   * The subject concept (i.e. source) of the concept relation
   * </pre>
   *
   * <code>.clarifai.api.Concept subject_concept = 2;</code>
   * @return The subjectConcept.
   */
  com.clarifai.grpc.api.Concept getSubjectConcept();
  /**
   * <pre>
   * The subject concept (i.e. source) of the concept relation
   * </pre>
   *
   * <code>.clarifai.api.Concept subject_concept = 2;</code>
   */
  com.clarifai.grpc.api.ConceptOrBuilder getSubjectConceptOrBuilder();

  /**
   * <pre>
   * The subject concept (i.e. destination) of the concept relation
   * </pre>
   *
   * <code>.clarifai.api.Concept object_concept = 3;</code>
   * @return Whether the objectConcept field is set.
   */
  boolean hasObjectConcept();
  /**
   * <pre>
   * The subject concept (i.e. destination) of the concept relation
   * </pre>
   *
   * <code>.clarifai.api.Concept object_concept = 3;</code>
   * @return The objectConcept.
   */
  com.clarifai.grpc.api.Concept getObjectConcept();
  /**
   * <pre>
   * The subject concept (i.e. destination) of the concept relation
   * </pre>
   *
   * <code>.clarifai.api.Concept object_concept = 3;</code>
   */
  com.clarifai.grpc.api.ConceptOrBuilder getObjectConceptOrBuilder();

  /**
   * <pre>
   * The predicate (i.e. edge) linking the subject and the object
   * Both subject_concept and object_concept are concepts.
   * The predicate is the type of relationship.
   * That predicate acts on the subject.
   * There are three current types of predicates:
   * 1) "hyponym"
   * 2) "hypernym"
   * 3) "synonym"
   * 1) For example, 'hyponym' is a type of predicate which represents 'is_a_kind_of' relation so
   * the following relationship:
   * 'honey' (subject), 'hyponym' (predicate), 'food' (object)
   * Can more easily be read as:
   * 'honey' 'is a kind of' 'food'
   * 2) The 'hypernym' relation is the opposite of 'hyponym' and when you add one of the
   * relationships the opposite will automatically appear for you in queries.
   * The 'hypernym' can be read as 'is a parent of' so:
   * 'food' (subject), 'hypernym' (predicate), 'honey' (object)
   * Can more easily be read as:
   * 'food' is a parent of 'honey'
   * 3) The 'synonym' relation defines two concepts that essential mean the same thing. This
   * is more like a "is" relationship. So for example a 'synonym' relationship could be:
   * "puppy" is "pup"
   * The reverse is also true once the former is added so:
   * "pup" is "puppy"
   * will appear in queries as well.
   * </pre>
   *
   * <code>string predicate = 4;</code>
   * @return The predicate.
   */
  java.lang.String getPredicate();
  /**
   * <pre>
   * The predicate (i.e. edge) linking the subject and the object
   * Both subject_concept and object_concept are concepts.
   * The predicate is the type of relationship.
   * That predicate acts on the subject.
   * There are three current types of predicates:
   * 1) "hyponym"
   * 2) "hypernym"
   * 3) "synonym"
   * 1) For example, 'hyponym' is a type of predicate which represents 'is_a_kind_of' relation so
   * the following relationship:
   * 'honey' (subject), 'hyponym' (predicate), 'food' (object)
   * Can more easily be read as:
   * 'honey' 'is a kind of' 'food'
   * 2) The 'hypernym' relation is the opposite of 'hyponym' and when you add one of the
   * relationships the opposite will automatically appear for you in queries.
   * The 'hypernym' can be read as 'is a parent of' so:
   * 'food' (subject), 'hypernym' (predicate), 'honey' (object)
   * Can more easily be read as:
   * 'food' is a parent of 'honey'
   * 3) The 'synonym' relation defines two concepts that essential mean the same thing. This
   * is more like a "is" relationship. So for example a 'synonym' relationship could be:
   * "puppy" is "pup"
   * The reverse is also true once the former is added so:
   * "pup" is "puppy"
   * will appear in queries as well.
   * </pre>
   *
   * <code>string predicate = 4;</code>
   * @return The bytes for predicate.
   */
  com.google.protobuf.ByteString
      getPredicateBytes();

  /**
   * <pre>
   * The knowledge graph id that this edge belongs to
   * </pre>
   *
   * <code>string knowledge_graph_id = 5;</code>
   * @return The knowledgeGraphId.
   */
  java.lang.String getKnowledgeGraphId();
  /**
   * <pre>
   * The knowledge graph id that this edge belongs to
   * </pre>
   *
   * <code>string knowledge_graph_id = 5;</code>
   * @return The bytes for knowledgeGraphId.
   */
  com.google.protobuf.ByteString
      getKnowledgeGraphIdBytes();
}
