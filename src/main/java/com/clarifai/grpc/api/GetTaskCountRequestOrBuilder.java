// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/service.proto

package com.clarifai.grpc.api;

public interface GetTaskCountRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:clarifai.api.GetTaskCountRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.clarifai.api.UserAppIDSet user_app_id = 1;</code>
   * @return Whether the userAppId field is set.
   */
  boolean hasUserAppId();
  /**
   * <code>.clarifai.api.UserAppIDSet user_app_id = 1;</code>
   * @return The userAppId.
   */
  com.clarifai.grpc.api.UserAppIDSet getUserAppId();
  /**
   * <code>.clarifai.api.UserAppIDSet user_app_id = 1;</code>
   */
  com.clarifai.grpc.api.UserAppIDSetOrBuilder getUserAppIdOrBuilder();

  /**
   * <pre>
   * task_id for which count per user per status is needed
   * </pre>
   *
   * <code>string task_id = 2;</code>
   * @return The taskId.
   */
  java.lang.String getTaskId();
  /**
   * <pre>
   * task_id for which count per user per status is needed
   * </pre>
   *
   * <code>string task_id = 2;</code>
   * @return The bytes for taskId.
   */
  com.google.protobuf.ByteString
      getTaskIdBytes();

  /**
   * <pre>
   * Only return counts for these user IDs, effectively operating as an
   * OR among them to filter down the results.
   * If model_version_ids or workflow_version_ids are also provided, these user_ids are OR'd with them as well because
   * we want the union of all worker (user, model or workflow) counts in the results.
   * </pre>
   *
   * <code>repeated string user_ids = 3;</code>
   * @return A list containing the userIds.
   */
  java.util.List<java.lang.String>
      getUserIdsList();
  /**
   * <pre>
   * Only return counts for these user IDs, effectively operating as an
   * OR among them to filter down the results.
   * If model_version_ids or workflow_version_ids are also provided, these user_ids are OR'd with them as well because
   * we want the union of all worker (user, model or workflow) counts in the results.
   * </pre>
   *
   * <code>repeated string user_ids = 3;</code>
   * @return The count of userIds.
   */
  int getUserIdsCount();
  /**
   * <pre>
   * Only return counts for these user IDs, effectively operating as an
   * OR among them to filter down the results.
   * If model_version_ids or workflow_version_ids are also provided, these user_ids are OR'd with them as well because
   * we want the union of all worker (user, model or workflow) counts in the results.
   * </pre>
   *
   * <code>repeated string user_ids = 3;</code>
   * @param index The index of the element to return.
   * @return The userIds at the given index.
   */
  java.lang.String getUserIds(int index);
  /**
   * <pre>
   * Only return counts for these user IDs, effectively operating as an
   * OR among them to filter down the results.
   * If model_version_ids or workflow_version_ids are also provided, these user_ids are OR'd with them as well because
   * we want the union of all worker (user, model or workflow) counts in the results.
   * </pre>
   *
   * <code>repeated string user_ids = 3;</code>
   * @param index The index of the value to return.
   * @return The bytes of the userIds at the given index.
   */
  com.google.protobuf.ByteString
      getUserIdsBytes(int index);

  /**
   * <pre>
   * Only return counts for these model version IDs, effectively operating as an
   * OR among them to filter down the results.
   * If user_ids or workflow_version_ids are also provided, these model_version_ids are OR'd with them as well because
   * we want the union of all worker (user, model or workflow) counts in the results.
   * </pre>
   *
   * <code>repeated string model_version_ids = 4;</code>
   * @return A list containing the modelVersionIds.
   */
  java.util.List<java.lang.String>
      getModelVersionIdsList();
  /**
   * <pre>
   * Only return counts for these model version IDs, effectively operating as an
   * OR among them to filter down the results.
   * If user_ids or workflow_version_ids are also provided, these model_version_ids are OR'd with them as well because
   * we want the union of all worker (user, model or workflow) counts in the results.
   * </pre>
   *
   * <code>repeated string model_version_ids = 4;</code>
   * @return The count of modelVersionIds.
   */
  int getModelVersionIdsCount();
  /**
   * <pre>
   * Only return counts for these model version IDs, effectively operating as an
   * OR among them to filter down the results.
   * If user_ids or workflow_version_ids are also provided, these model_version_ids are OR'd with them as well because
   * we want the union of all worker (user, model or workflow) counts in the results.
   * </pre>
   *
   * <code>repeated string model_version_ids = 4;</code>
   * @param index The index of the element to return.
   * @return The modelVersionIds at the given index.
   */
  java.lang.String getModelVersionIds(int index);
  /**
   * <pre>
   * Only return counts for these model version IDs, effectively operating as an
   * OR among them to filter down the results.
   * If user_ids or workflow_version_ids are also provided, these model_version_ids are OR'd with them as well because
   * we want the union of all worker (user, model or workflow) counts in the results.
   * </pre>
   *
   * <code>repeated string model_version_ids = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the modelVersionIds at the given index.
   */
  com.google.protobuf.ByteString
      getModelVersionIdsBytes(int index);

  /**
   * <pre>
   * Only return counts for these workflow version IDs, effectively operating as an
   * OR among them to filter down the results.
   * If user_ids or model_version_ids are also provided, these workflow_version_ids are OR'd with them as well because
   * we want the union of all worker (user, model or workflow) counts in the results.
   * </pre>
   *
   * <code>repeated string workflow_version_ids = 5;</code>
   * @return A list containing the workflowVersionIds.
   */
  java.util.List<java.lang.String>
      getWorkflowVersionIdsList();
  /**
   * <pre>
   * Only return counts for these workflow version IDs, effectively operating as an
   * OR among them to filter down the results.
   * If user_ids or model_version_ids are also provided, these workflow_version_ids are OR'd with them as well because
   * we want the union of all worker (user, model or workflow) counts in the results.
   * </pre>
   *
   * <code>repeated string workflow_version_ids = 5;</code>
   * @return The count of workflowVersionIds.
   */
  int getWorkflowVersionIdsCount();
  /**
   * <pre>
   * Only return counts for these workflow version IDs, effectively operating as an
   * OR among them to filter down the results.
   * If user_ids or model_version_ids are also provided, these workflow_version_ids are OR'd with them as well because
   * we want the union of all worker (user, model or workflow) counts in the results.
   * </pre>
   *
   * <code>repeated string workflow_version_ids = 5;</code>
   * @param index The index of the element to return.
   * @return The workflowVersionIds at the given index.
   */
  java.lang.String getWorkflowVersionIds(int index);
  /**
   * <pre>
   * Only return counts for these workflow version IDs, effectively operating as an
   * OR among them to filter down the results.
   * If user_ids or model_version_ids are also provided, these workflow_version_ids are OR'd with them as well because
   * we want the union of all worker (user, model or workflow) counts in the results.
   * </pre>
   *
   * <code>repeated string workflow_version_ids = 5;</code>
   * @param index The index of the value to return.
   * @return The bytes of the workflowVersionIds at the given index.
   */
  com.google.protobuf.ByteString
      getWorkflowVersionIdsBytes(int index);
}
