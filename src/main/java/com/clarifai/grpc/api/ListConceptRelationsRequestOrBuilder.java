// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/service.proto

package com.clarifai.grpc.api;

public interface ListConceptRelationsRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:clarifai.api.ListConceptRelationsRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The user_id and app_id information.
   * </pre>
   *
   * <code>.clarifai.api.UserAppIDSet user_app_id = 1;</code>
   * @return Whether the userAppId field is set.
   */
  boolean hasUserAppId();
  /**
   * <pre>
   * The user_id and app_id information.
   * </pre>
   *
   * <code>.clarifai.api.UserAppIDSet user_app_id = 1;</code>
   * @return The userAppId.
   */
  com.clarifai.grpc.api.UserAppIDSet getUserAppId();
  /**
   * <pre>
   * The user_id and app_id information.
   * </pre>
   *
   * <code>.clarifai.api.UserAppIDSet user_app_id = 1;</code>
   */
  com.clarifai.grpc.api.UserAppIDSetOrBuilder getUserAppIdOrBuilder();

  /**
   * <pre>
   * The subject concept id in your app to get all the relationships for.
   * Leave as an empty string (GET /concepts/relations) to list ALL the relations in the app.
   * When listing all the relations it will only return one direction of the relationship
   * with the predicate acting on the subject and not the inverse like is done when providing a
   * concept_id so that we can return a reliable page size always.
   * When providing a concept_id, if a hyponym is present in the DB such as:
   * 'honey' (subject), 'hyponym' (predict for "is a kind of"), 'food' (object)
   * then you can list the concept relations for 'honey' and get hyponym predicate with 'food'
   * object.
   * But you can also list the concept relations for 'food' and it will return the same hyponym
   * relationship with 'honey' as subject and 'food' as predicate.
   * Synonyms by nature are symmetrical relationships so either side can be the concept_id (subject)
   * when listing the relations.
   * </pre>
   *
   * <code>string concept_id = 2;</code>
   * @return The conceptId.
   */
  java.lang.String getConceptId();
  /**
   * <pre>
   * The subject concept id in your app to get all the relationships for.
   * Leave as an empty string (GET /concepts/relations) to list ALL the relations in the app.
   * When listing all the relations it will only return one direction of the relationship
   * with the predicate acting on the subject and not the inverse like is done when providing a
   * concept_id so that we can return a reliable page size always.
   * When providing a concept_id, if a hyponym is present in the DB such as:
   * 'honey' (subject), 'hyponym' (predict for "is a kind of"), 'food' (object)
   * then you can list the concept relations for 'honey' and get hyponym predicate with 'food'
   * object.
   * But you can also list the concept relations for 'food' and it will return the same hyponym
   * relationship with 'honey' as subject and 'food' as predicate.
   * Synonyms by nature are symmetrical relationships so either side can be the concept_id (subject)
   * when listing the relations.
   * </pre>
   *
   * <code>string concept_id = 2;</code>
   * @return The bytes for conceptId.
   */
  com.google.protobuf.ByteString
      getConceptIdBytes();

  /**
   * <pre>
   * This is part of the url so we can extend to multiple link types in the future.
   * Valid predicates are:
   * 'hypernyms'
   * 'hyponyms'
   * </pre>
   *
   * <code>string predicate = 3;</code>
   * @return The predicate.
   */
  java.lang.String getPredicate();
  /**
   * <pre>
   * This is part of the url so we can extend to multiple link types in the future.
   * Valid predicates are:
   * 'hypernyms'
   * 'hyponyms'
   * </pre>
   *
   * <code>string predicate = 3;</code>
   * @return The bytes for predicate.
   */
  com.google.protobuf.ByteString
      getPredicateBytes();

  /**
   * <pre>
   * If knowledge_graph_id is provided then just list relations from that knowledge graph.
   * If not provided then list relations from all knowledge graphs including the global one for this
   * app one (ie. knowledge_graph "") and any specific ones in the app.
   * </pre>
   *
   * <code>string knowledge_graph_id = 4;</code>
   * @return The knowledgeGraphId.
   */
  java.lang.String getKnowledgeGraphId();
  /**
   * <pre>
   * If knowledge_graph_id is provided then just list relations from that knowledge graph.
   * If not provided then list relations from all knowledge graphs including the global one for this
   * app one (ie. knowledge_graph "") and any specific ones in the app.
   * </pre>
   *
   * <code>string knowledge_graph_id = 4;</code>
   * @return The bytes for knowledgeGraphId.
   */
  com.google.protobuf.ByteString
      getKnowledgeGraphIdBytes();

  /**
   * <pre>
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   * </pre>
   *
   * <code>uint32 page = 5;</code>
   * @return The page.
   */
  int getPage();

  /**
   * <pre>
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 10.
   * </pre>
   *
   * <code>uint32 per_page = 6;</code>
   * @return The perPage.
   */
  int getPerPage();
}
