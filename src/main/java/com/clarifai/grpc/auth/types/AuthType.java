// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/auth/types/types.proto

package com.clarifai.grpc.auth.types;

/**
 * <pre>
 * Authorization type for endpoints.
 * </pre>
 *
 * Protobuf enum {@code clarifai.auth.types.AuthType}
 */
public enum AuthType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * introduce undef so that the zero (default/unset) value of the enum is not a real
   * permission.  undef is only present for this purpose and should not be used
   * to indicate any "real" value.
   * </pre>
   *
   * <code>undef = 0;</code>
   */
  undef(0),
  /**
   * <pre>
   * No authorization need for this endpoint.
   * </pre>
   *
   * <code>NoAuth = 1;</code>
   */
  NoAuth(1),
  /**
   * <pre>
   * This authorization requires API keys (both app-spceific keys and personal access tokens).
   * The endpoints that use this AuthType may also include a list of
   * clarifai.auth.utils.cl_depending_scopes.
   * </pre>
   *
   * <code>KeyAuth = 2;</code>
   */
  KeyAuth(2),
  /**
   * <pre>
   * This uses a session token from your web browser. This is reserved for users/account level APIs
   * that are only needed in a browser.
   * </pre>
   *
   * <code>SessionTokenAuth = 3;</code>
   */
  SessionTokenAuth(3),
  /**
   * <pre>
   * This uses a special token for admin access to the APIs.
   * </pre>
   *
   * <code>AdminAuth = 4;</code>
   */
  AdminAuth(4),
  /**
   * <pre>
   * This authorization requires personal access tokens. This is used for endpoints such as
   * /users/{user_id}/apps which are not specific. An app-specific API key will not work
   * when PATAuth is used.
   * </pre>
   *
   * <code>PATAuth = 5;</code>
   */
  PATAuth(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * introduce undef so that the zero (default/unset) value of the enum is not a real
   * permission.  undef is only present for this purpose and should not be used
   * to indicate any "real" value.
   * </pre>
   *
   * <code>undef = 0;</code>
   */
  public static final int undef_VALUE = 0;
  /**
   * <pre>
   * No authorization need for this endpoint.
   * </pre>
   *
   * <code>NoAuth = 1;</code>
   */
  public static final int NoAuth_VALUE = 1;
  /**
   * <pre>
   * This authorization requires API keys (both app-spceific keys and personal access tokens).
   * The endpoints that use this AuthType may also include a list of
   * clarifai.auth.utils.cl_depending_scopes.
   * </pre>
   *
   * <code>KeyAuth = 2;</code>
   */
  public static final int KeyAuth_VALUE = 2;
  /**
   * <pre>
   * This uses a session token from your web browser. This is reserved for users/account level APIs
   * that are only needed in a browser.
   * </pre>
   *
   * <code>SessionTokenAuth = 3;</code>
   */
  public static final int SessionTokenAuth_VALUE = 3;
  /**
   * <pre>
   * This uses a special token for admin access to the APIs.
   * </pre>
   *
   * <code>AdminAuth = 4;</code>
   */
  public static final int AdminAuth_VALUE = 4;
  /**
   * <pre>
   * This authorization requires personal access tokens. This is used for endpoints such as
   * /users/{user_id}/apps which are not specific. An app-specific API key will not work
   * when PATAuth is used.
   * </pre>
   *
   * <code>PATAuth = 5;</code>
   */
  public static final int PATAuth_VALUE = 5;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static AuthType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static AuthType forNumber(int value) {
    switch (value) {
      case 0: return undef;
      case 1: return NoAuth;
      case 2: return KeyAuth;
      case 3: return SessionTokenAuth;
      case 4: return AdminAuth;
      case 5: return PATAuth;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<AuthType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      AuthType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<AuthType>() {
          public AuthType findValueByNumber(int number) {
            return AuthType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.clarifai.grpc.auth.types.Types.getDescriptor().getEnumTypes().get(0);
  }

  private static final AuthType[] VALUES = values();

  public static AuthType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private AuthType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:clarifai.auth.types.AuthType)
}

